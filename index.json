[
{
	"uri": "/",
	"title": "Keleustes",
	"tags": [],
	"description": "Main page",
	"content": " Keleustes Rationale  The projects listed here are POC intended to help make educated decisions for the implementation of OpenInfrastructure Airship project. None of thoses POC aimed at replacing for airship components. Those POC merely aim to highlight the potential advantages and pitfalls of choosing one technology versus another.  Airship Design  Airship OpenDiscussion Specs Governance  Airship Related Links  airship treasuremap pegleg spyglass shipyard armada deckhand drydock promenade divingbell maas  Openstack Related Links  openstack openstack-helm openstack-helm-infra  "
},
{
	"uri": "/post/",
	"title": "Latest News",
	"tags": [],
	"description": "",
	"content": " Posts Convertion to new HUGO is still WIP\n"
},
{
	"uri": "/kustomize/",
	"title": "Kustomize",
	"tags": [],
	"description": "This is the keleustes kustomize POC page",
	"content": "Kustomize Rationale  Investigate the feasibility of converting deckhand functions to kustomize. For that purpose improvments have been made and proposed to the kustomize community. CRD have been created and added to the underlying Kubernetes Cluster. Note that using CRDs does not force the Airship architecture to migrate to operator architecture immediatly. Some efforts has been spent into getting the OpenAPIV3Schema in the deploy/crds/xxx.yaml to be as accurate as possible. This helps getting kubectl version syntax verification. Still the real syntax check will be performed into helmv3 since it verifies the syntax of the values obtained from layering the \u0026ldquo;override\u0026rdquo; values on top of the \u0026ldquo;default\u0026rdquo; values provided in the chart. This is not a \u0026ldquo;replacement\u0026rdquo; for airship deckhand. This POC merely aims to highlight the potential advantages and pitfall in going in that direction.  Lessons Learned Layering  TBD  Substitutions  TBD  Documentation  ReadTheDocs Readme  Associated GIT Repos  kustomize airship-deckhand  \n"
},
{
	"uri": "/armada-operator/",
	"title": "Armada",
	"tags": [],
	"description": "This is the keleustes armada-operator POC page",
	"content": "Armada Rationale  Investigate the feasibility of converting airship-armada functions into a Kubernetes operator pattern. This is not a \u0026ldquo;replacement\u0026rdquo; for airship armada. This POC merely aims to highlight the potential advantages and pitfall in going in that direction.  Lessons Learned CRD usages  Schema validation: openAPIV3 schema validation is supported by kubectl. The schema can be generated out of the go code:  generated schema generation mechanism go code  DeepCopy and structured types in golang:  During the CRD definition, the system especially during deep-copy generation does not really support generic yaml object such as interface{}. The Values of the ArmadaChart that would leave untyped (interface{}) when using go had to be modified to use a well defined struct: ArmadaChartValue. This increases the complexity very rapidely. We could not get a []byte construct to be used instead. Moreover, any struct not beeing well defined as in AVConf, gives ability to the system to be more permissive but the corresponding data is not accessible in the struct return to the reconcile method  Fundamentally, all the different constructs for the values.yaml of all the charts developped for airship and openstack-helm, are beeing funnel through the construct. Even the teams did an outstanding job of consolidation of those charts, outsiders are spotted causing very quickly issues and prevent a kubectl apply -f xxx.yaml to work. In the partical cases of the ArmadaChart, the feature overlapping with the work done by the helmv3 team: schema validation  Operator Usage  Ownership of objects:  The armada-operator code was largely coming for the operator-fwk helm implemention, especially the watch and the way the owner is added to the top k8s objects deployed by an helm release owner The armada-operator can now decide what to do when an object owned by an ArmadaChart is deleted which helps for consistency. What to do if a user ran a \u0026lsquo;kubectl edit\u0026rsquo; command in the back of armada, or if a stateful set created by an armada chart is beeing deleted. Should the object be recreated or the status of the armadachart set to \u0026ldquo;inconsistent\u0026rdquo;.  Kubernetes Event Handling:  One of the main arship-armada feature is to be able to detect when the resources deployed by an helm chart are available, timeout and potentially delete the release if something went wrong: airship-armada Since the armada-operator is listening on all the object owned by an ArmadaChart, it was possible to emulate the feature: An event detecting a change of state triggers a reconcile: event When the resources deployed by the helm release, the ArmadaChart status goes from \u0026ldquo;running\u0026rdquo; to \u0026ldquo;ready/deployed\u0026rdquo;: ready  RBAC Implication: Kubernetes RBAC and service accounts are used. Because the armada-operator oftens ends up running helm charts which are creating new service accounts, the rights provided to the armada-operator looks kind of extensive: roles Deployment of the operator itself: The operator is deployed in kubernetes itself. If using helm, we have some kind of chicken-egg issue. Otherwise the operator can be deployed using simple kubectl  HelmV2 vs HelmV3  Tiller dependency: TBD Helm Golang code dependency: Using the go client code instead of the helm execute brings use the power of using go code but also brings dependencies issues on the helm code structure. We had to account for the improvments and refactorexing done by the helm team:  v2 tag chart struct in helmv2 v3 tag chart struct in helmv3   Multithreading and Concurrency  One Armada Operator per namespace: TBD  Underlying resource state management One of the key feature of armada is to be able to figure if the resources deployed through helm install or helm upgrade are ready to be used.\nDocumentation  ReadTheDocs Readme  Associated GIT Repos  armada-operator airship-armada  \n"
},
{
	"uri": "/airship-treasuremap/",
	"title": "TreasureMap",
	"tags": [],
	"description": "This is the keleustes treasuremap POC page",
	"content": "TreasureMap Rationale  Investigate the feasibility of converting airship-treasuremap site descriptions into kustomize site descriptions (Kubernetes CRD based). The kustomize layering are beeing leverage (global, type, site). This is not a \u0026ldquo;replacement\u0026rdquo; for airship treasuremap. This POC merely aims at highlighting what would have to be done to adapt treasuremap to tools such as kustomize, argo\u0026hellip;  Lessons Learned Layering  TBD  Substitutions  TBD  Schema Validation  Some of the OpenAPI V3 construct are not supported yet by CRDs.  AdditionalProperties are allowed in specific conditions, check additionalProperties Definitions and Refs are not supported: definitions AnyOf construct anyOf   Documentation  ReadTheDocs Readme  Associated GIT Repos  airship-treasuremap airship-treasuremap  \n"
},
{
	"uri": "/oslc-operator/",
	"title": "LifeCycle Manager",
	"tags": [],
	"description": "This is keleustes OpenstackService LifeCycle operator POC",
	"content": "OpenstackLCM Rationale  Create a Kubernetes Operator able to orchestrate draining traffic, upgrading, testing, traffic rollout\u0026hellip; The main lesson learned from this POC is the ability to use the helm rendering to provide a unified way of delivering scripts onto a platform and at runtime selectively decide which part of the chart to render according to the state of the service which lifecycle may not match exactly the lifecycle of a helm chart (i.e install, upgrade, rollback, delete).  Lessons Learned Multi facet charts  TBD  Traffic Draining  TBD  ScaleUp / ScaleDown  TBD  Documentation  Readme  Associated GIT Repos  oslc-operator  \n"
},
{
	"uri": "/cluster-api/",
	"title": "Cluster-API",
	"tags": [],
	"description": "This is the keleustes cluyster-api POC page",
	"content": "Cluster API Rationale  This POC of a baremetal cluster-api provider was started before the official cluster-api-provider-baremetal This POC was relying on Airship Drydock/Maas. Thanks to the work done by the metal3.io team, most of content of this POC has become irrelevant. The remaining questions that can be kind of answered by this POC are:  Is DivingBell still relevant. Is the cluster-api in charge of updating, rebooting machines when the machine specs are updated. How much of Promenade is still relevant. cluster-api indeed helping to save the kubeadm token into configmaps to help machine to join. Can kustomize be used to build the cluster-api MachineList and Cluster CRDs from Airship Site definitions.  This is not a \u0026ldquo;replacement\u0026rdquo; for airship drydock. This POC merely aims to highlight the potential advantages and pitfall in going in that direction.  Lessons Learned Baremetal machine greenfield deployment  TBD  Baremetal machine brownfield upgrade and update  Docker, Kubelet: TBD OS: TBD  Kubernetes state maintenance  kubeproxy, api-server,\u0026hellip;: TBD  Documentation  TBD  Associated GIT Repos  cluster-api cluster-api-provider-baremetal cluster-api-provider-airship  \n"
},
{
	"uri": "/kubeadm/",
	"title": "Kubeadm",
	"tags": [],
	"description": "This is the kubeadm POC page",
	"content": "Kubeadm Rationale  Investigate the feasibility of converting promenade functions to kubeadm. For that purpose improvments have been made and proposed to the kubeadm community. This is not a \u0026ldquo;replacement\u0026rdquo; for airship promenade. This POC merely aims at highlighting the potential advantages and pitfall in going in that direction.  Lessons Learned Layering  TBD  Substitutions  TBD  Documentation  ReadTheDocs Readme  Associated GIT Repos  kubeadm airship-promenade  \n"
},
{
	"uri": "/argo/",
	"title": "Argo",
	"tags": [],
	"description": "This is the keleustes argo POC page",
	"content": "Argo Rationale  Investigate the feasibility of converting shipyard functions to argo. For that purpose improvments have been made and proposed to the argo community. This is not a \u0026ldquo;replacement\u0026rdquo; for airship shipyard. This POC merely aims at highlighting the potential advantages and pitfall in going in that direction.  Lessons Learned Workflow  TBD  Documentation  ReadTheDocs Readme  Associated GIT Repos  argo airship-shipyard  \n"
},
{
	"uri": "/about/",
	"title": "About KELEUSTES",
	"tags": [],
	"description": "",
	"content": " About WIP\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]